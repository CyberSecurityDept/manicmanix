import os
import subprocess
import shutil
import json  # Pastikan untuk mengimpor modul json
from app.utils.config import PROJECT_ROOT
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_device_id() -> str:
    result = subprocess.run(["adb", "devices"], capture_output=True, text=True)
    lines = result.stdout.splitlines()

    for line in lines[1:]:
        parts = line.split()
        if len(parts) >= 2 and parts[1] == "device":
            return parts[0]

    return None

def delete_malware() -> dict:
    try:
        device_id = get_device_id()
        if not device_id:
            return {"status": "error", "message": "No connected device found via ADB."}

        dumpsys_file_path = os.path.join(
            PROJECT_ROOT, "output-scan", device_id, "dumpsys_activities_detected.json"
        )
        if not os.path.exists(dumpsys_file_path):
            return {
                "status": "error",
                "message": f"File not found: {dumpsys_file_path}",
            }

        removal_executable = os.path.join(PROJECT_ROOT, "poc", "linux", "removal")
        subprocess.run([removal_executable, dumpsys_file_path], check=True)

        output_scan_path = os.path.join(PROJECT_ROOT, "output-scan")
        if os.path.exists(output_scan_path):
            shutil.rmtree(output_scan_path)

        return {
            "status": "success",
            "message": "Malware deleted and output-scan folder cleaned up.",
        }

    except subprocess.CalledProcessError as e:
        return {"status": "error", "message": f"Failed to execute malware removal: {e}"}
    except Exception as e:
        return {"status": "error", "message": f"An error occurred: {e}"}

def delete_malware_by_package_names(package_names: list) -> dict:
    try:
        logger.info("Fetching device ID...")
        device_id = get_device_id()
        if not device_id:
            logger.error("No connected device found.")
            return {"status": "error", "message": "No connected device found via ADB."}

        logger.info(f"Device ID: {device_id}")
        dumpsys_file_path = os.path.join(
            PROJECT_ROOT, "output-scan", device_id, "dumpsys_activities_detected.json"
        )
        logger.info(f"Checking file: {dumpsys_file_path}")

        if not os.path.exists(dumpsys_file_path):
            logger.error(f"File not found: {dumpsys_file_path}")
            return {
                "status": "error",
                "message": f"File not found: {dumpsys_file_path}",
            }

        # Load JSON
        logger.info("Loading JSON data...")
        with open(dumpsys_file_path, "r") as file:
            data = json.load(file)

        deleted_packages = []
        not_found_packages = []

        for package_name in package_names:
            logger.info(f"Searching for package: {package_name}")
            if package_name in data:
                # Delete the package entry
                logger.info(f"Deleting package: {package_name}")
                del data[package_name]
                deleted_packages.append(package_name)
            else:
                logger.warning(f"Package '{package_name}' not found.")
                not_found_packages.append(package_name)

        # Save updated JSON if any packages were deleted
        if deleted_packages:
            logger.info("Saving updated JSON...")
            with open(dumpsys_file_path, "w") as file:
                json.dump(data, file, indent=4)

            logger.info(f"Packages {deleted_packages} successfully deleted.")
            return {
                "status": "success",
                "message": f"Packages {deleted_packages} successfully deleted.",
                "not_found": not_found_packages,
            }
        else:
            logger.warning("No packages were deleted.")
            return {
                "status": "error",
                "message": "No packages were deleted.",
                "not_found": not_found_packages,
            }

    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse JSON: {e}")
        return {"status": "error", "message": f"Failed to parse JSON: {e}"}
    except Exception as e:
        logger.exception(f"An error occurred: {e}")
        return {"status": "error", "message": f"An error occurred: {e}"}
