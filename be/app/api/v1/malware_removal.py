import os
import json
import logging
import subprocess
import glob

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List
from dotenv import load_dotenv
from app.repositories.malware_removal import delete_malware
from app.services.device_overview_service import DeviceOverviewService

router = APIRouter()
load_dotenv()


PROJECT_ROOT = os.path.expanduser(f"{str(os.getenv('PROJECT_ROOT'))}")

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class PackageNamesRequest(BaseModel):
    package_names: List[str]

def get_device_serials():
    try:
        result = subprocess.run(["adb", "devices"], capture_output=True, text=True, check=True)
        lines = result.stdout.strip().split("\n")[1:]  
        return [line.split()[0] for line in lines if line.endswith("\tdevice")]
    except subprocess.CalledProcessError as e:
        raise Exception(f"Failed to get device serials: {e.stderr}")
    
def get_latest_scan_directory(base_path: str) -> str:
    try:
        directories = [
            d for d in os.listdir(base_path)
            if os.path.isdir(os.path.join(base_path, d))
        ]
        if not directories:
            raise FileNotFoundError(f"Tidak ada direktori scan ditemukan di {base_path}")
        latest_directory = max(
            directories, key=lambda x: os.path.getmtime(os.path.join(base_path, x))
        )
        return os.path.join(base_path, latest_directory)
    except Exception as e:
        logger.error(f"Error saat mencari direktori terbaru: {e}")
        raise

def uninstall_files(serial_number: str, file_path: str):
    try:
        # Wrap the file path in quotes to handle spaces and special characters
        wrapped_path = f'"{file_path}"'
        
        # Use shell command to handle spaces in filenames
        result = subprocess.run(
            ["adb", "-s", serial_number, "shell", f"rm {wrapped_path}"],
            capture_output=True,
            text=True,
            check=True
        )
        logger.info(f"Output Uninstall_files: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Gagal menghapus file: {e}")
        return False

def uninstall_package(serial_number: str, package_name: str):
    try:
        result = subprocess.run(
            ["adb", "-s", serial_number, "uninstall", package_name],
            capture_output=True,
            text=True,
            check=True
        )
        logger.info(f"Uninstall output: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to uninstall package: {e.stderr}")
        return False

def find_dumpsys_file(serial_number):
    
    base_path = os.path.join(
        PROJECT_ROOT, "output-scan", "full-scan", serial_number)
    
    latest_scan_directory = get_latest_scan_directory(base_path)
    
    search_pattern = os.path.join(
       latest_scan_directory, "dumpsys_activities_detected.json"
    )
    
    matching_files = glob.glob(search_pattern, recursive=True)
    
    logger.debug(f"Search pattern: {search_pattern}")  
    logger.debug(f"Matching files: {matching_files}")  
    
    if not matching_files:
        logger.error(f"No dumpsys_activities_detected.json found for serial number: {serial_number}")
        raise HTTPException(status_code=404, detail=f"No dumpsys_activities_detected.json found for serial number: {serial_number}")
    
    
    return matching_files[0]

def find_dumpsys_file_fastscan(serial_number):
    base_path = os.path.join(
        PROJECT_ROOT, "output-scan", "fast-scan", serial_number)
    
    latest_scan_directory = get_latest_scan_directory(base_path)
    
    search_pattern = os.path.join(
       latest_scan_directory, "dumpsys_activities_detected.json"
    )
    
    logger.debug(f"Fast scan: Searching for dumpsys_activities_detected.json in fast-scan directory.")
    logger.debug(f"Search pattern: {search_pattern}")
    
    matching_files = glob.glob(search_pattern, recursive=True)
    
    logger.debug(f"Matching files: {matching_files}")
    
    if not matching_files:
        logger.error(f"Fast scan: No dumpsys_activities_detected.json found for serial number: {serial_number}")
        raise HTTPException(status_code=404, detail=f"No dumpsys_activities_detected.json found in fast-scan directory for serial number: {serial_number}")
    
    return matching_files[0]

def update_fast_scan_result(serial_number, package_name):
    fast_scan_result_file = os.path.join(
        PROJECT_ROOT, "output-scan", "fast-scan", serial_number, "fast-scan_result.json"
    )
    
    logger.debug(f"Fast scan: Updating fast_scan_result.json at {fast_scan_result_file}")
    
    if not os.path.exists(fast_scan_result_file):
        logger.warning(f"Fast scan: fast_scan_result.json not found for serial number: {serial_number}")
        return False
    
    try:
        with open(fast_scan_result_file, "r") as file:
            data = json.load(file)
        
        logger.debug(f"Fast scan: Loaded fast_scan_result.json data: {data}")
        
        if "threats" in data:
            initial_threat_count = len(data["threats"])
            data["threats"] = [threat for threat in data["threats"] if threat.get("package_name") != package_name]
            updated_threat_count = len(data["threats"])
            data["total_threats"] = updated_threat_count

            logger.info(f"Fast scan: Removed package '{package_name}' from fast_scan_result.json. Threats reduced from {initial_threat_count} to {updated_threat_count}.")
        
        with open(fast_scan_result_file, "w") as file:
            json.dump(data, file, indent=4)
        
        logger.info(f"Fast scan: Updated fast_scan_result.json successfully.")
        return True
    except json.JSONDecodeError as e:
        logger.error(f"Fast scan: Failed to parse fast_scan_result.json: {e}")
        return False
    except Exception as e:
        logger.exception(f"Fast scan: An error occurred while updating fast_scan_result.json: {e}")
        return False

@router.delete("/delete-malware")
async def delete_malware_endpoint():
    result = delete_malware()
    return result

@router.delete("/delete-files", summary="Delete multiple file by their full-path")
async def delete_files(request: PackageNamesRequest):
    try:
        logger.info("Fetching device ID...")
        device_serials = get_device_serials()
        if not device_serials:
            logger.error("No connected device found.")
            raise HTTPException(status_code=404, detail="No connected device found via ADB.")
        
        serial_number = device_serials[0]
        logger.info(f"Device ID: {serial_number}")
        
        deleted_files = []
        failed_files = []
        
        for file_path in request.package_names:  # Using package_names field for file paths
            logger.info(f"Attempting to delete file: {file_path}")
            
            if uninstall_files(serial_number, file_path):
                logger.info(f"Successfully deleted file: {file_path}")
                deleted_files.append(file_path)
            else:
                logger.error(f"Failed to delete file: {file_path}")
                failed_files.append(file_path)
        
        if not deleted_files and failed_files:
            logger.warning("No files were deleted successfully.")
            return {
                "status": "error",
                "message": "Failed to delete any files.",
                "failed_files": failed_files
            }
        
        success_message = f"Successfully deleted {len(deleted_files)} files."
        if failed_files:
            success_message += f" {len(failed_files)} files failed to delete."
            
        return {
            "status": "success",
            "message": success_message,
            "deleted_files": deleted_files,
            "failed_files": failed_files
        }
        
    except Exception as e:
        logger.exception(f"An error occurred while deleting files: {e}")
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")
        
        

@router.delete("/delete-packages", summary="Delete multiple packages by their names")
async def delete_packages(request: PackageNamesRequest):
    try:
        logger.info("Fetching device ID...")
        device_serials = get_device_serials()
        if not device_serials:
            logger.error("No connected device found.")
            raise HTTPException(status_code=404, detail="No connected device found via ADB.")
        
        serial_number = device_serials[0]
        logger.info(f"Device ID: {serial_number}")

        
        dumpsys_file_path = find_dumpsys_file(serial_number)
        logger.info(f"File found: {dumpsys_file_path}")

        logger.info("Loading JSON data...")
        with open(dumpsys_file_path, "r") as file:
            data = json.load(file)
        logger.info(f"Loaded JSON data: {data}")  

        deleted_packages = []
        not_found_packages = []
        for package_name in request.package_names:
            logger.info(f"Searching for package: {package_name}")
            found = False
            for entry in data:
                if entry.get("package_name") == package_name:
                    found = True
                    data.remove(entry)
                    logger.info(f"Package '{package_name}' found and deleted from JSON.")
                    
                    
                    if uninstall_package(serial_number, package_name):
                        logger.info(f"Package '{package_name}' successfully uninstalled.")
                        deleted_packages.append(package_name)
                    else:
                        logger.error(f"Failed to uninstall package '{package_name}'.")
                    break
            if not found:
                logger.warning(f"Package '{package_name}' not found.")
                not_found_packages.append(package_name)

        if not deleted_packages:
            logger.warning("No packages were deleted.")
            return {
                "status": "error",
                "message": "No packages were deleted.",
                "not_found": not_found_packages,
            }

        logger.info("Saving updated JSON...")
        with open(dumpsys_file_path, "w") as file:
            json.dump(data, file, indent=4)
        logger.info(f"Packages {deleted_packages} successfully deleted.")
        return {
            "status": "success",
            "message": f"Successfully deleted {len(deleted_packages)} packages.",
            "deleted_packages": deleted_packages,
            "not_found": not_found_packages,
        }
    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse JSON: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to parse JSON: {e}")
    except Exception as e:
        logger.exception(f"An error occurred: {e}")
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")

@router.delete("/delete-package/{package_name}", summary="Delete a package by its name")
async def delete_package(package_name: str):
    try:
        logger.info("Fetching device ID...")
        device_serials = get_device_serials()
        if not device_serials:
            logger.error("No connected device found.")
            raise HTTPException(status_code=404, detail="No connected device found via ADB.")
        
        serial_number = device_serials[0]
        logger.info(f"Device ID: {serial_number}")

        
        dumpsys_file_path = find_dumpsys_file(serial_number)
        logger.info(f"File found: {dumpsys_file_path}")

        logger.info("Loading JSON data...")
        try:
            with open(dumpsys_file_path, "r") as file:
                data = json.load(file)
            logger.info(f"Loaded JSON data: {data}")  
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse JSON: {e}")
            raise HTTPException(status_code=500, detail=f"Failed to parse JSON: {e}")

        
        detected_packages = [entry.get("package_name") for entry in data if "package_name" in entry]
        logger.debug(f"Detected packages: {detected_packages}")

        
        if package_name not in detected_packages:
            logger.warning(f"Package '{package_name}' not found in detected activities.")
            return {
                "status": "error",
                "message": f"Package '{package_name}' not found in the detected activities."
            }

        
        logger.info(f"Uninstalling package: {package_name}")
        uninstall_success = uninstall_package(serial_number, package_name)
        if uninstall_success:
            logger.info(f"Package '{package_name}' successfully uninstalled.")
            
            
            data = [entry for entry in data if entry.get("package_name") != package_name]
            with open(dumpsys_file_path, "w") as file:
                json.dump(data, file, indent=4)
            logger.info(f"Package '{package_name}' removed from dumpsys_activities_detected.json.")
            
            return {
                "status": "success",
                "message": f"Package '{package_name}' successfully uninstalled and removed from JSON."
            }
        else:
            logger.error(f"Failed to uninstall package '{package_name}'.")
            return {
                "status": "error",
                "message": f"Failed to uninstall package '{package_name}'."
            }

    except FileNotFoundError as e:
        logger.error(f"File not found: {e}")
        raise HTTPException(status_code=404, detail=f"File not found: {e}")
    except Exception as e:
        logger.exception(f"An error occurred: {e}")
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")

@router.delete("/delete-package-fastscan/{package_name}", summary="Delete a package by its name using fast scan")
async def delete_package_fastscan(package_name: str):
    try:
        logger.info("Fast scan: Fetching device ID...")
        device_serials = get_device_serials()
        if not device_serials:
            logger.error("Fast scan: No connected device found.")
            raise HTTPException(status_code=404, detail="No connected device found via ADB.")
        
        serial_number = device_serials[0]
        logger.info(f"Fast scan: Device ID: {serial_number}")
        
        # Find the dumpsys_activities_detected.json file
        dumpsys_file_path = find_dumpsys_file_fastscan(serial_number)
        logger.info(f"Fast scan: File found: {dumpsys_file_path}")
        
        # Load JSON data
        try:
            with open(dumpsys_file_path, "r") as file:
                data = json.load(file)
            logger.info(f"Fast scan: Loaded JSON data: {data}")
        except json.JSONDecodeError as e:
            logger.error(f"Fast scan: Failed to parse JSON: {e}")
            raise HTTPException(status_code=500, detail=f"Failed to parse JSON: {e}")
        
        # Check if package exists in detected activities
        detected_packages = [entry.get("package_name") for entry in data if "package_name" in entry]
        if package_name not in detected_packages:
            logger.warning(f"Fast scan: Package '{package_name}' not found in detected activities.")
            return {
                "status": "error",
                "message": f"Package '{package_name}' not found in the detected activities."
            }
        
        # Uninstall the package
        uninstall_success = uninstall_package(serial_number, package_name)
        if uninstall_success:
            logger.info(f"Fast scan: Package '{package_name}' successfully uninstalled.")
            
            # Remove the package from dumpsys_activities_detected.json
            data = [entry for entry in data if entry.get("package_name") != package_name]
            with open(dumpsys_file_path, "w") as file:
                json.dump(data, file, indent=4)
            logger.info(f"Fast scan: Package '{package_name}' removed from dumpsys_activities_detected.json.")
            
            # Update fast_scan_result.json
            update_fast_scan_result(serial_number, package_name)
            
            return {
                "status": "success",
                "message": f"Package '{package_name}' successfully uninstalled and removed from all JSON files."
            }
        else:
            logger.error(f"Fast scan: Failed to uninstall package '{package_name}'.")
            return {
                "status": "error",
                "message": f"Failed to uninstall package '{package_name}'. Please ensure the package exists and the device is connected properly."
            }
    except FileNotFoundError as e:
        logger.error(f"Fast scan: File not found: {e}")
        raise HTTPException(status_code=404, detail=f"File not found: {e}")
    except Exception as e:
        logger.exception(f"Fast scan: An error occurred: {e}")
        raise HTTPException(status_code=500, detail=f"An error occurred: {e}")